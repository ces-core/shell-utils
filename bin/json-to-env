#!/usr/bin/env bash

usage() {
	cat >&2 << EOF
USAGE

	$0 [-x] [-f] <file>
	$0 [-x] [-f] -
	$0 [-x]

DESCRIPTION

	Converts a JSON file into environment variables.
	Each \`key\`: \`value\` pair will be converted to a \`key=\$value\` statement.
	If <file> is not provided or is \`-\`, it will read from stdin.

OPTIONS

	-h, --help
        Displays this help text.
	-f, --file
		The path to the file to read from.
	-x, --export
        Prepend 'export' to the generated environment variables.
EOF
}

json-to-env() {
	local options
	local file
	local exports=false

	options=$(getopt -o hxf: -l help,export,file: --name "$0" -- "$@")
	eval set -- "$options"

	while true; do
		case "$1" in
			-h|--help)
				usage
				exit 0
				;;
			-x|--export)
				exports=true
				;;
			-f|--file)
				shift
				file="$1"
				;;
			--)
				shift
				break
				;;
		esac
		shift
	done

	# If -f/--file is not used, <file> is the first positional argument
	# If it's not given or empty, then the script should read from stdin
	file="${file:-${1:-/dev/stdin}}"
	local output=$(
		jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' "$file" |
			while IFS='|' read -r key value; do
				# If it's an address, make sure it's checksummed
				if [[ "$value" =~ '^0x[0-9a-fA-F]{40}$' ]]; then
					PAIR="${key}=$(seth --to-checksum-address "${value}")"
				else
					PAIR="${key}=${value}"
				fi
				echo "${PAIR}"
			done
	)

	for pair in $output; do
		if [ "$exports" == 'true' ]; then
			echo "export ${pair}"
		else
			echo "${pair}"
		fi
	done
}

# Executes the function if it's been called as a script.
# This will evaluate to false if this script is sourced by other script.
if [ "$0" = "$BASH_SOURCE" ]; then
	set -eo pipefail
	json-to-env $@
fi

